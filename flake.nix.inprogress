{
  description = "NixOS configuration";

  inputs = rec {
    unstable.url = "github:NixOS/nixpkgs/nixos-unstable";
    stable.url = "github:NixOS/nixpkgs/nixos-22.05";
    nixpkgs = unstable;
    nixos-hardware.url = "github:NixOS/nixos-hardware/master";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = inputs@{ self, nixpkgs, home-manager, stable, unstable, nixos-hardware, ... }: 
    let
      system = "x86_64-linux";
      pkgs = import nixpkgs { 
        config.allowUnfree = true;
      };
      lib = nixpkgs.lib;
      # home-manager = import home-manager { inherit pkgs; };
      # config = {
      #   imports = [
      #     ./hardware-configuration.nix
      #     ./configuration.nix
      #   ];
      # };
    in {
    nixosConfigurations = {
      overlays = {
        pkg-sets = (
          final: prev: {
            unstable = import inputs.unstable { system = final.system; };
            stable = import inputs.stable { system = final.system; };
          }
        );
        # specialArgs = {
        #   inherit pkgs lib;
        #   inherit (inputs) unstable stable nixpkgs nixos-hardware home-manager;
        # };
      };
      # "nixos" below is supposed to be the actual hostname
      nixos = lib.nixosSystem rec {
        inherit system;
        modules = [
          nixos-hardware.nixosModules.system76
          ./hardware-configuration.nix
          ./zfs.nix
          ./configuration.nix
          # home-manager.nixosModules.home-manager
          # {
          #   home-manager.useGlobalPkgs = true;
          #   home-manager.useUserPackages = true;
          #   home-manager.users.pmarreck = import ./home.nix {
          #     inherit system;
          #     pkgs = import nixpkgs {
          #       inherit system;
          #       config = { allowUnfree = true; };
          #     };
          #     unstable = import unstable {
          #       inherit system;
          #       config = { allowUnfree = true; };
          #     };
          #   };
          #   # Optionally, use home-manager.extraSpecialArgs to pass
          #   # arguments to home.nix
          #   system.configurationRevision = nixpkgs.lib.mkIf (self ? rev) self.rev;
          # };
        ];
      };
    };
  };
}
